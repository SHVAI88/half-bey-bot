from aiogram import Bot, Dispatcher, types
from aiogram.utils import executor
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, ReplyKeyboardRemove
from config import API_TOKEN, ADMIN_IDS
from data import products, carts, save_products, save_carts
import json

bot = Bot(token=API_TOKEN)
dp = Dispatcher(bot)

def main_menu():
    kb = ReplyKeyboardMarkup(resize_keyboard=True)
    kb.add(KeyboardButton("üõç –ö–∞—Ç–∞–ª–æ–≥"))
    kb.add(KeyboardButton("üõí –ö–æ—Ä–∑–∏–Ω–∞"))
    return kb


@dp.message_handler(commands=["start"])
async def cmd_start(msg: types.Message):
    # –£–¥–∞–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    await msg.answer("...", reply_markup=ReplyKeyboardRemove())

    # –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ (Telegram UI —É—Å–ø–µ–≤–∞–µ—Ç —É–±—Ä–∞—Ç—å –∫–ª–∞–≤—É)
    await bot.send_chat_action(msg.chat.id, action="typing")

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —á–∏—Å—Ç–æ–µ –º–µ–Ω—é
    await msg.answer("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å üëã", reply_markup=main_menu())


@dp.message_handler(lambda m: m.text == "üõç –ö–∞—Ç–∞–ª–æ–≥")
async def show_catalog(msg: types.Message):
    if not products:
        await msg.answer("–ö–∞—Ç–∞–ª–æ–≥ –ø–æ–∫–∞ –ø—É—Å—Ç.")
        return

    for i, item in enumerate(products):
        caption = f"üß¢ {item['name']}\n{item['description']}\nüíµ –¶–µ–Ω–∞: {item['price']}BYN\n\n–ß—Ç–æ–±—ã –∫—É–ø–∏—Ç—å: –Ω–∞–ø–∏—à–∏ `–∫—É–ø–∏—Ç—å {i}`"
        await bot.send_photo(msg.chat.id, item['photo'], caption=caption, parse_mode="Markdown")

@dp.message_handler(lambda m: m.text == "üõí –ö–æ—Ä–∑–∏–Ω–∞")
async def show_cart(msg: types.Message):
    user_id = str(msg.from_user.id)
    cart = carts.get(user_id, [])
    if not cart:
        await msg.answer("üß∫ –í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞.")
        return

    text = "üõí –í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞:\n"
    total = 0
    for i, item in enumerate(cart):
        text += f"{i+1}. {item['name']} ‚Äî {item['price']}BYN\n"
        total += item['price']
    text += f"\n–ò—Ç–æ–≥–æ: {total}BYN"
    text += f"\n\nüîÅ –û—Ç–ø—Ä–∞–≤—å—Ç–µ —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ: @{msg.from_user.username or '–±–µ–∑_—é–∑–µ—Ä–Ω–µ–π–º–∞'}"
    await msg.answer(text)

from data import save_products, save_carts  # –Ω–µ –∑–∞–±—É–¥—å

@dp.message_handler(lambda m: m.text.startswith("–∫—É–ø–∏—Ç—å "))
async def buy_item(msg: types.Message):
    user_id = str(msg.from_user.id)
    try:
        index = int(msg.text.split()[1])
        item = products[index]
        carts.setdefault(user_id, []).append(item)
        save_carts()
        await msg.answer(f"‚úÖ –¢–æ–≤–∞—Ä ¬´{item['name']}¬ª –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∫–æ—Ä–∑–∏–Ω—É.")
    except (IndexError, ValueError):
        await msg.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä —Ç–æ–≤–∞—Ä–∞. –ü—Ä–∏–º–µ—Ä: –∫—É–ø–∏—Ç—å 0")

@dp.message_handler(content_types=types.ContentType.PHOTO)
async def handle_photo_add(msg: types.Message):
    if msg.from_user.id not in ADMIN_IDS:
        return

    if not msg.caption:
        await msg.answer("‚ùó –í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –≤ –ø–æ–¥–ø–∏—Å–∏ –∫ —Ñ–æ—Ç–æ. –ü—Ä–∏–º–µ—Ä:\n–ö—Ä–æ—Å—Å–æ–≤–∫–∏\n–û–ø–∏—Å–∞–Ω–∏–µ\n–¶–µ–Ω–∞:120")
        return

    lines = msg.caption.strip().split('\n')
    if len(lines) < 2:
        await msg.answer("‚ùå –ù–µ —Ö–≤–∞—Ç–∞–µ—Ç –æ–ø–∏—Å–∞–Ω–∏—è. –ü–æ—Å–ª–µ–¥–Ω—è—è —Å—Ç—Ä–æ–∫–∞ ‚Äî –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ `–¶–µ–Ω–∞:120`")
        return

    try:
        price_line = lines[-1]
        price = int(price_line.replace("–¶–µ–Ω–∞:", "").strip())
    except:
        await msg.answer("‚ùå –ü–æ—Å–ª–µ–¥–Ω—è—è —Å—Ç—Ä–æ–∫–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –≤–∏–¥–∞: `–¶–µ–Ω–∞:120`")
        return

    name = lines[0]
    description = "\n".join(lines[1:-1])
    photo_id = msg.photo[-1].file_id

    products.append({
        "name": name,
        "description": description,
        "price": price,
        "photo": photo_id
    })
    save_products()

    await msg.answer(f"‚úÖ –¢–æ–≤–∞—Ä ¬´{name}¬ª –¥–æ–±–∞–≤–ª–µ–Ω.")

@dp.message_handler(commands=['delete'])
async def delete_product(msg: types.Message):
    if msg.from_user.id not in ADMIN_IDS:
        return

    try:
        _, index = msg.text.split()
        index = int(index)
        removed = products.pop(index)
        save_products()
        await msg.answer(f"‚ùå –¢–æ–≤–∞—Ä ¬´{removed['name']}¬ª —É–¥–∞–ª—ë–Ω.")
    except:
        await msg.answer("‚ùå –ò—Å–ø–æ–ª—å–∑—É–π: /delete 0")

if __name__ == '__main__':
    executor.start_polling(dp, skip_updates=True)
